package guiversion1;

import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

public class EmployeeGUI extends javax.swing.JFrame 
{
    int in = 0;
    HourlyEmployee emp = new HourlyEmployee();
    String date;
    Calendar hoursCal;
    String username, password;
    int empID;

    public EmployeeGUI() 
    {
        username = "brian.postell";
        password = "Postell018";
        empID = 1001;
        initComponents();
        EmployeeGUI.this.getContentPane().setBackground(Color.white);
        btnClock.setText("Clock IN");
        

        date = viewDateChooser.getSelection().toString();
        emp.setViewHourDate(date);
        System.out.println(""+emp.getViewHourDate());
       
        
        new Thread()
        {
            @Override
            public void run()
            {
                while(true)
                {
                    Calendar cal = new GregorianCalendar();
                    String timeOfDay;
                    String zero1 = "";
                    String zero2 = "";
                    
                    int hour = cal.get(Calendar.HOUR);
                    int minute = cal.get(Calendar.MINUTE);
                    int second = cal.get(Calendar.SECOND);
                    int AM_PM = cal.get(Calendar.AM_PM);
                    int month = cal.get(Calendar.MONTH);
                    int day = cal.get(Calendar.DAY_OF_MONTH);
                    int year = cal.get(Calendar.YEAR);
                    
                    if (AM_PM == 0)
                    {
                        timeOfDay = "AM";
                    }
                    else
                    {
                        timeOfDay = "PM";
                    }
                    
                    if (hour == 0 && AM_PM != 0)
                    {
                        hour = 12;
                    }
                    
                    if (minute < 10)
                    {
                        zero1 = "0";
                    }
                    if (second < 10)
                    {
                        zero2 = "0";
                    }
                    
                    String time = hour + ":" + zero1 + minute + ":" + zero2 
                            + second;
                    
                    String date = (month+1) + "/" + day + "/" + year;

                    lblTime.setText(time);
                    lblAmPm.setText(timeOfDay);
                    lblDate.setText(date);
                }
            }
        
        }.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlClock = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        lblAmPm = new javax.swing.JLabel();
        btnClock = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        pnlTimeOff = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        pnlViewHours = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHours = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        lblTime.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblAmPm.setFont(new java.awt.Font("Consolas", 0, 36)); // NOI18N
        lblAmPm.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        btnClock.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnClock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClockActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout pnlClockLayout = new javax.swing.GroupLayout(pnlClock);
        pnlClock.setLayout(pnlClockLayout);
        pnlClockLayout.setHorizontalGroup(
            pnlClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClockLayout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addGroup(pnlClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlClockLayout.createSequentialGroup()
                        .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAmPm, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnClock, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
        pnlClockLayout.setVerticalGroup(
            pnlClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlClockLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(pnlClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAmPm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClock, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clock In/Out", pnlClock);

        jToggleButton1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jToggleButton1.setText("Submit Date(s)");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTimeOffLayout = new javax.swing.GroupLayout(pnlTimeOff);
        pnlTimeOff.setLayout(pnlTimeOffLayout);
        pnlTimeOffLayout.setHorizontalGroup(
            pnlTimeOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimeOffLayout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(267, Short.MAX_VALUE))
        );
        pnlTimeOffLayout.setVerticalGroup(
            pnlTimeOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTimeOffLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Request Time Off", pnlTimeOff);

        txtHours.setColumns(20);
        txtHours.setRows(5);
        jScrollPane1.setViewportView(txtHours);

        javax.swing.GroupLayout pnlViewHoursLayout = new javax.swing.GroupLayout(pnlViewHours);
        pnlViewHours.setLayout(pnlViewHoursLayout);
        pnlViewHoursLayout.setHorizontalGroup(
            pnlViewHoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewHoursLayout.createSequentialGroup()
                .addGap(307, 307, 307)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        pnlViewHoursLayout.setVerticalGroup(
            pnlViewHoursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlViewHoursLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("View Hours", pnlViewHours);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnClockActionPerformed(java.awt.event.ActionEvent evt) {                                         
  // I copied the calendar from above and made a couple of modifications for the end format
          Calendar cal = new GregorianCalendar();
                    String timeOfDay;
                    String zero1 = "";
                    String zero2 = "";
                    String zero3 = "";
                    String zero4 = "";
                    int extraHours = 0;
                    
                    int hour = cal.get(Calendar.HOUR);
                    int minute = cal.get(Calendar.MINUTE);
                    int second = cal.get(Calendar.SECOND);
                    int AM_PM = cal.get(Calendar.AM_PM);
                    int month = cal.get(Calendar.MONTH);
                    int day = cal.get(Calendar.DAY_OF_MONTH);
                    int year = cal.get(Calendar.YEAR);
                    
                    if (AM_PM == 0)
                    {
                        timeOfDay = "AM";
                    }
                    else
                    {
                        timeOfDay = "PM";
                        extraHours = 12;
                    }
                    
                    if (hour == 0 && AM_PM != 0)
                    {
                        hour = 12;
                    }
                    
                    if (minute < 10)
                    {
                        zero1 = "0";
                    }
                    if (second < 10)
                    {
                        zero2 = "0";
                    }
                     if (month < 10){ 
                         zero3 = "0";
                     }
                     if (day < 10){
                         zero4 = "0";
                     }
                    
                     
                     hour = hour + extraHours;
                    String timeIn = hour +  zero1 + minute +  zero2 
                            + second;
                    String dateIn = ""+year + zero3 +(month+1) + zero4 + day;

    //
    //
    try{  // This try-catch statement is required for the connection to attempt to connect.

Class.forName("com.mysql.jdbc.Driver");  // this loads the drivers for the connection. (you will need to download the mysql-connector.jar file and load it into the program.)
Connection myConnection=DriverManager.getConnection(  //You must open the connection.
"jdbc:mysql://CTASV20R2DRW.tamuct.edu/talon_technology",username,password);   //In order to connect, the following must me provided in this order (database location, username, password.)
Statement statement = myConnection.createStatement();  //the statement object which allows an SQL statement to be sent is initialized.
ResultSet resultSet=statement.executeQuery("select * from employee where empID =" + empID);  // The result set is created as a result of executing the query.
resultSet.next();//This loads the first line of results
//JOptionPane.showMessageDialog(null, "bubbles");
int isClockedIn = resultSet.getInt(16); // This identifies if the employee is currently logged in and uses that for the following if statement
    
if (isClockedIn == 0) {
    statement.executeUpdate("insert into Clock  (EmpID, DateIn, TimeIn)  values  ("+empID+","+dateIn+","+timeIn+");");  //This creates a new row in the clock table.
    statement.executeUpdate("Update employee set ClockedIn = '1' where empID = "+empID+";"); // This marks the employee as clocked in
}
else {
    resultSet=statement.executeQuery("select * from clock where empID = "+empID+" and CurrentlyIn = 1"); // This finds the row in the clock table that is waiting for clockout data. There is a column "CurrentlyIn" in the clock table that solved the finding issue.
    resultSet.next(); // This loads the first line of results
    int dateID = resultSet.getInt(2); //The dataID is copied
    statement.executeUpdate("update clock set dateout = "+dateIn+", timeout = "+timeIn+", CurrentlyIn = 0  where empID = "+empID+" and date_ID =  "+dateID); // The log out data is written to the open spot on the table located via the DateID.
    statement.executeUpdate("Update employee set ClockedIn = '0' where empID = "+empID); //The employee is marked as no longer logged in on the employee table. I may make this a constraint.
}

myConnection.close();  //This closes the connection so the database is not swarmed with users.
JOptionPane.showMessageDialog(null, "Hurray, it worked!");
}
    catch(HeadlessException | ClassNotFoundException | SQLException e) // this catches whatever exception may be thrown
    {  JOptionPane.showMessageDialog(null, "Unable to connect to server.");}  // if for some reason the code is unexecutable, this message will be displayed.

                                     
                    
//        emp.setClockedIn(in);
//        String empTime = lblTime.getText() + " " + lblAmPm.getText();
//        String date = lblDate.getText();
//        
//        if (emp.getClockedIn() == false)
//        {
//            btnClock.setText("Clock OUT");
//            //String empTime = lblTime.getText() + " " + lblAmPm.getText();
//            //String date = lblDate.getText();
//            JOptionPane.showMessageDialog
//            (null, "You clocked in today at:\n" + empTime);
//            //String empDate = lblDate.getText();
//            emp.setTimeIn(empTime, date);
//            in += 1;
//        }
//        else if (emp.getClockedIn() == true)
//        {
//            btnClock.setText("Clock IN");
//            //String empTime = lblTime.getText() + " " + lblAmPm.getText();
//            JOptionPane.showMessageDialog
//            (null, "You clocked out today at:\n" + empTime);
//            emp.setTimeOut(empTime, date);
//            in -= 1;//        emp.setClockedIn(in);
//        String empTime = lblTime.getText() + " " + lblAmPm.getText();
//        String date = lblDate.getText();
//        
//        if (emp.getClockedIn() == false)
//        {
//            btnClock.setText("Clock OUT");
//            //String empTime = lblTime.getText() + " " + lblAmPm.getText();
//            //String date = lblDate.getText();
//            JOptionPane.showMessageDialog
//            (null, "You clocked in today at:\n" + empTime);
//            //String empDate = lblDate.getText();
//            emp.setTimeIn(empTime, date);
//            in += 1;
//        }
//        else if (emp.getClockedIn() == true)
//        {
//            btnClock.setText("Clock IN");
//            //String empTime = lblTime.getText() + " " + lblAmPm.getText();
//            JOptionPane.showMessageDialog
//            (null, "You clocked out today at:\n" + empTime);
//            emp.setTimeOut(empTime, date);
//            in -= 1;
//        }
    }                                        

    private void viewDateChooserOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {                                                  

        if (!viewDateChooser.getSelection().toString().equals(date))
        {
            date = viewDateChooser.getSelection().toString();
            emp.setViewHourDate(date);
            System.out.println(""+emp.getViewHourDate());
        }

    }                                                 

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                               
        
        JOptionPane.showMessageDialog(null, "Your request has been sent to management.");
        
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnClock;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblAmPm;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblTime;
    private javax.swing.JPanel pnlClock;
    private javax.swing.JPanel pnlTimeOff;
    private javax.swing.JPanel pnlViewHours;
    private javax.swing.JTextArea txtHours;
    // End of variables declaration                   
}
